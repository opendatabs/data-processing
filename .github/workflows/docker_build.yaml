name: Build Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      base_changed: ${{ steps.process.outputs.base_changed }}
      projects: ${{ steps.process.outputs.projects }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # Use the base branch for PR comparisons
          base: ${{ github.base_ref }}

          # Output a JSON object describing matched filters & changed files
          list-files: json

          # Define all filters: "base" plus each subproject
          filters: |
            base:
              - 'Dockerfile'
            aue_grundwasser:
              - 'Dockerfile'
              - 'aue_grundwasser/**'
            aue_rues:
              - 'Dockerfile'
              - 'aue_rues/**'
            aue_schall:
              - 'Dockerfile'
              - 'aue_schall/**'
            aue_umweltlabor:
              - 'Dockerfile'
              - 'aue_umweltlabor/**'
            bafu_hydrodaten:
              - 'Dockerfile'
              - 'bafu_hydrodaten/**'
            bafu_hydrodaten_vorhersagen:
              - 'Dockerfile'
              - 'bafu_hydrodaten_vorhersagen/**'
            bvb_fahrgastzahlen:
              - 'Dockerfile'
              - 'bvb_fahrgastzahlen/**'
            dataspot:
              - 'Dockerfile'
              - 'dataspot/**'
            ed_schulferien:
              - 'Dockerfile'
              - 'ed_schulferien/**'
            ed_swisslos_sportfonds:
              - 'Dockerfile'
              - 'ed_swisslos_sportfonds/**'
            esc_faq:
              - 'Dockerfile'
              - 'esc_faq/**'
            euroairport:
              - 'Dockerfile'
              - 'euroairport/**'
            fgi_geodatenshop:
              - 'Dockerfile'
              - 'fgi_geodatenshop/**'
            gd_abwassermonitoring:
              - 'Dockerfile'
              - 'gd_abwassermonitoring/**'
            gd_coronavirus_abwassermonitoring:
              - 'Dockerfile'
              - 'gd_coronavirus_abwassermonitoring/**'
            gva_geodatenshop:
              - 'Dockerfile'
              - 'gva_geodatenshop/**'
            ibs_parkhaus_bewegungen:
              - 'Dockerfile'
              - 'ibs_parkhaus_bewegungen/**'
            itbs_klv:
              - 'Dockerfile'
              - 'itbs_klv/**'
            iwb_gas:
              - 'Dockerfile'
              - 'iwb_gas/**'
            iwb_netzlast:
              - 'Dockerfile'
              - 'iwb_netzlast/**'
            jfs_gartenbaeder:
              - 'Dockerfile'
              - 'jfs_gartenbaeder/**'
            kapo_geschwindigkeitsmonitoring:
              - 'Dockerfile'
              - 'kapo_geschwindigkeitsmonitoring/**'
            lufthygiene_rosental:
              - 'Dockerfile'
              - 'lufthygiene_rosental/**'
            luftqualitaet_ch:
              - 'Dockerfile'
              - 'luftqualitaet_ch/**'
            kapo_ordnungsbussen:
              - 'Dockerfile'
              - 'kapo_ordnungsbussen/**'
            kapo_smileys:
              - 'Dockerfile'
              - 'kapo_smileys/**'
            meteoblue_rosental:
              - 'Dockerfile'
              - 'meteoblue_rosental/**'
            meteoblue_wolf:
              - 'Dockerfile'
              - 'meteoblue_wolf/**'
            mkb_sammlung_europa:
              - 'Dockerfile'
              - 'mkb_sammlung_europa/**'
            mobilitaet_dtv:
              - 'Dockerfile'
              - 'mobilitaet_dtv/**'
            mobilitaet_mikromobilitaet:
              - 'Dockerfile'
              - 'mobilitaet_mikromobilitaet/**'
            mobilitaet_mikromobilitaet_stats:
              - 'Dockerfile'
              - 'mobilitaet_mikromobilitaet_stats/**'
            mobilitaet_parkflaechen:
              - 'Dockerfile'
              - 'mobilitaet_parkflaechen/**'
            mobilitaet_verkehrszaehldaten:
              - 'Dockerfile'
              - 'mobilitaet_verkehrszaehldaten/**'
            ods_catalog:
              - 'Dockerfile'
              - 'ods_catalog/**'
            ods_harvest:
              - 'Dockerfile'
              - 'ods_harvest/**'
            staka_regierungsratsbeschluesse:
              - 'staka_regierungsratsbeschluesse/**'
            stata_harvester:
              - 'stata_harvester/**'

      - name: Process changes
        id: process
        run: |
          CHANGES='${{ steps.filter.outputs.changes }}'
          echo "Detected changes = $CHANGES"

          if [[ "$CHANGES" == *"base"* ]]; then
            echo "base_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "base_changed=false" >> "$GITHUB_OUTPUT"
          fi

          CLEAN_CHANGES=$(echo "$CHANGES" | jq -c 'map(select(. != "base"))')

          echo "projects=$CLEAN_CHANGES" >> "$GITHUB_OUTPUT"
          
  # --------------------------------------------------------------
  # Build/push the base image if needed
  # --------------------------------------------------------------
  build_base:
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push the base image
        # Only run if base_changed == 'true'
        if: ${{ needs.changes.outputs.base_changed == 'true' }}
        uses: docker/build-push-action@v5
        with:
          # Build from the repository root
          context: .
          file: ./Dockerfile
          # Only push on merges to master or manual triggers
          push: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch' }}
          tags: |
            ghcr.io/${{ github.repository }}/base:${{ github.sha }}
            ${{ (
                  (github.event_name == 'push' && github.ref == 'refs/heads/master')
                  || github.event_name == 'workflow_dispatch'
               ) && format('ghcr.io/{0}/base:latest', github.repository)
               || ''
            }}
          cache-from: type=gha,scope=base
          cache-to: type=gha,mode=max,scope=base

  # --------------------------------------------------------------
  # Build all subprojects
  # --------------------------------------------------------------
  build_and_push:
    needs: [changes, build_base]
    if: ${{ needs.changes.outputs.projects != '[]' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.changes.outputs.projects) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image for ${{ matrix.project }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.project }}
          file: ./${{ matrix.project }}/Dockerfile
          push: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch' }}
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.project }}:${{ github.sha }}
            ${{ (
                  (github.event_name == 'push' && github.ref == 'refs/heads/master')
                  || github.event_name == 'workflow_dispatch'
               ) && format('ghcr.io/{0}/{1}:latest', github.repository, matrix.project)
               || ''
            }}
          cache-from: type=gha,scope=${{ matrix.project }}
          cache-to: type=gha,mode=max,scope=${{ matrix.project }}
